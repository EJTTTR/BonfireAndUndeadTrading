{
  "getting-started.html": {
    "href": "getting-started.html",
    "title": "Getting Started | BonfireandUndeadTrading",
    "keywords": "Getting Started"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | BonfireandUndeadTrading",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "introduction.html": {
    "href": "introduction.html",
    "title": "Introduction | BonfireandUndeadTrading",
    "keywords": "Introduction"
  },
  "packages/Newtonsoft.Json.13.0.3/LICENSE.html": {
    "href": "packages/Newtonsoft.Json.13.0.3/LICENSE.html",
    "title": "| BonfireandUndeadTrading",
    "keywords": "The MIT License (MIT) Copyright (c) 2007 James Newton-King Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "packages/Newtonsoft.Json.13.0.3/README.html": {
    "href": "packages/Newtonsoft.Json.13.0.3/README.html",
    "title": "Json.NET | BonfireandUndeadTrading",
    "keywords": "Json.NET Json.NET is a popular high-performance JSON framework for .NET Serialize JSON Product product = new Product(); product.Name = \"Apple\"; product.Expiry = new DateTime(2008, 12, 28); product.Sizes = new string[] { \"Small\" }; string json = JsonConvert.SerializeObject(product); // { // \"Name\": \"Apple\", // \"Expiry\": \"2008-12-28T00:00:00\", // \"Sizes\": [ // \"Small\" // ] // } Deserialize JSON string json = @\"{ 'Name': 'Bad Boys', 'ReleaseDate': '1995-4-7T00:00:00', 'Genres': [ 'Action', 'Comedy' ] }\"; Movie m = JsonConvert.DeserializeObject<Movie>(json); string name = m.Name; // Bad Boys LINQ to JSON JArray array = new JArray(); array.Add(\"Manual text\"); array.Add(new DateTime(2000, 5, 23)); JObject o = new JObject(); o[\"MyArray\"] = array; string json = o.ToString(); // { // \"MyArray\": [ // \"Manual text\", // \"2000-05-23T00:00:00\" // ] // } Links Homepage Documentation NuGet Package Release Notes Contributing Guidelines License Stack Overflow"
  },
  "packages/Stripe.net.45.6.0/README.html": {
    "href": "packages/Stripe.net.45.6.0/README.html",
    "title": "Stripe.net | BonfireandUndeadTrading",
    "keywords": "Stripe.net The official Stripe .NET library, supporting .NET Standard 2.0+, .NET Core 2.0+, and .NET Framework 4.6.1+. Installation Using the .NET Core command-line interface (CLI) tools: dotnet add package Stripe.net Using the NuGet Command Line Interface (CLI): nuget install Stripe.net Using the Package Manager Console: Install-Package Stripe.net From within Visual Studio: Open the Solution Explorer. Right-click on a project within your solution. Click on Manage NuGet Packages... Click on the Browse tab and search for \"Stripe.net\". Click on the Stripe.net package, select the appropriate version in the right-tab and click Install. Documentation For a comprehensive list of examples, check out the API documentation. See video demonstrations covering how to use the library. Usage Authentication Stripe authenticates API requests using your accountâ€™s secret key, which you can find in the Stripe Dashboard. By default, secret keys can be used to perform any API request without restriction. Use StripeConfiguration.ApiKey property to set the secret key. StripeConfiguration.ApiKey = \"sk_test_...\"; Creating a resource The Create method of the service class can be used to create a new resource: var options = new CustomerCreateOptions { Email = \"customer@example.com\" }; var service = new CustomerService(); Customer customer = service.Create(options); // Newly created customer is returned Console.WriteLine(customer.Email); Retrieve a resource The Retrieve method of the service class can be used to retrieve a resource: var service = new CustomerService(); Customer customer = service.Get(\"cus_1234\"); Console.WriteLine(customer.Email); Updating a resource The Update method of the service class can be used to update a resource: var options = new CustomerUpdateOptions { Email = \"updated-email@example.com\" }; var service = new CustomerService(); Customer customer = service.Update(\"cus_123\", options); // The updated customer is returned Console.WriteLine(customer.Email); Deleting a resource The Delete method of the service class can be used to delete a resource: var service = new CustomerService(); Customer customer = service.Delete(\"cus_123\", options); Listing a resource The List method on the service class can be used to list resources page-by-page. NOTE The List method returns only a single page, you have to manually continue the iteration using the StartingAfter parameter. var service = new CustomerService(); var customers = service.List(); string lastId = null; // Enumerate the first page of the list foreach (Customer customer in customers) { lastId = customer.Id; Console.WriteLine(customer.Email); } customers = service.List(new CustomerListOptions() { StartingAfter = lastId, }); // Enumerate the subsequent page foreach (Customer customer in customers) { lastId = customer.Id; Console.WriteLine(customer.Email); } Listing a resource with auto-pagination The ListAutoPaging method on the service class can be used to automatically iterate over all pages. var service = new CustomerService(); var customers = service.ListAutoPaging(); // Enumerate all pages of the list foreach (Customer customer in customers) { Console.WriteLine(customer.Email); } Per-request configuration All of the service methods accept an optional RequestOptions object. This is used if you want to set an idempotency key, if you are using Stripe Connect, or if you want to pass the secret API key on each method. var requestOptions = new RequestOptions(); requestOptions.ApiKey = \"SECRET API KEY\"; requestOptions.IdempotencyKey = \"SOME STRING\"; requestOptions.StripeAccount = \"CONNECTED ACCOUNT ID\"; Using a custom HttpClient You can configure the library with your own custom HttpClient: StripeConfiguration.StripeClient = new StripeClient( apiKey, httpClient: new SystemNetHttpClient(httpClient)); Please refer to the Advanced client usage wiki page to see more examples of using custom clients, e.g. for using a proxy server, a custom message handler, etc. Automatic retries The library automatically retries requests on intermittent failures like on a connection error, timeout, or on certain API responses like a status 409 Conflict. Idempotency keys are always added to requests to make any such subsequent retries safe. By default, it will perform up to two retries. That number can be configured with StripeConfiguration.MaxNetworkRetries: StripeConfiguration.MaxNetworkRetries = 0; // Zero retries How to use undocumented parameters and properties stripe-dotnet is a typed library and it supports all public properties or parameters. Stripe sometimes has beta features which introduce new properties or parameters that are not immediately public. The library does not support these properties or parameters until they are public but there is still an approach that allows you to use them. Parameters To pass undocumented parameters to Stripe using stripe-dotnet you need to use the AddExtraParam() method, as shown below: var options = new CustomerCreateOptions { Email = \"jenny.rosen@example.com\" } options.AddExtraParam(\"secret_feature_enabled\", \"true\"); options.AddExtraParam(\"secret_parameter[primary]\", \"primary value\"); options.AddExtraParam(\"secret_parameter[secondary]\", \"secondary value\"); var service = new CustomerService(); var customer = service.Create(options); Properties To retrieve undocumented properties from Stripe using C# you can use an option in the library to return the raw JSON object and return the property. An example of this is shown below: var service = new CustomerService(); var customer = service.Get(\"cus_1234\"); customer.RawJObject[\"secret_feature_enabled\"]; customer.RawJObject[\"secret_parameter\"][\"primary\"]; customer.RawJObject[\"secret_parameter\"][\"secondary\"]; Writing a plugin If you're writing a plugin that uses the library, we'd appreciate it if you identified using StripeConfiguration.AppInfo: StripeConfiguration.AppInfo = new AppInfo { Name = \"MyAwesomePlugin\", Url = \"https://myawesomeplugin.info\", Version = \"1.2.34\", }; This information is passed along when the library makes calls to the Stripe API. Note that while Name is always required, Url and Version are optional. Telemetry By default, the library sends telemetry to Stripe regarding request latency and feature usage. These numbers help Stripe improve the overall latency of its API for all users, and improve popular features. You can disable this behavior if you prefer: StripeConfiguration.EnableTelemetry = false; Beta SDKs Stripe has features in the beta phase that can be accessed via the beta version of this package. We would love for you to try these and share feedback with us before these features reach the stable phase. To install a beta version of Stripe.net use the version parameter with dotnet add package command: dotnet add package Stripe.net --version 40.3.0-beta.1 Note There can be breaking changes between beta versions. Therefore we recommend pinning the package version to a specific beta version in your project file. This way you can install the same version each time without breaking changes unless you are intentionally looking for the latest beta version. We highly recommend keeping an eye on when the beta feature you are interested in goes from beta to stable so that you can move from using a beta version of the SDK to the stable version. If your beta feature requires a Stripe-Version header to be sent, set the StripeConfiguration.ApiVersion property with the StripeConfiguration.AddBetaVersion function: Note The ApiVersion can only be set in beta versions of the library. StripeConfiguration.AddBetaVersion(\"feature_beta\", \"v3\"); Support New features and bug fixes are released on the latest major version of the Stripe .NET client library. If you are on an older major version, we recommend that you upgrade to the latest in order to use the new features and bug fixes including those for security vulnerabilities. Older major versions of the package will continue to be available for use, but will not be receiving any updates. Development .NET 8 is required to build and test Stripe.net SDK, you can install it from get.dot.net. The test suite depends on stripe-mock, so make sure to fetch and run it from a background terminal (stripe-mock's README also contains instructions for installing via Homebrew and other methods): go install github.com/stripe/stripe-mock@latest stripe-mock Run all tests from the src/StripeTests directory: dotnet test src Run some tests, filtering by name: dotnet test src --filter FullyQualifiedName~InvoiceServiceTest Run tests for a single target framework: dotnet test src --framework net8.0 The library uses dotnet-format for code formatting. Code must be formatted before PRs are submitted, otherwise CI will fail. Run the formatter with: dotnet format src/Stripe.net.sln For any requests, bug or comments, please open an issue or submit a pull request."
  },
  "packages/System.Configuration.ConfigurationManager.8.0.0/PACKAGE.html": {
    "href": "packages/System.Configuration.ConfigurationManager.8.0.0/PACKAGE.html",
    "title": "| BonfireandUndeadTrading",
    "keywords": "About Provides types that support using XML configuration files (app.config). This package exists only to support migrating existing .NET Framework code that already uses System.Configuration. When writing new code, use another configuration system instead, such as Microsoft.Extensions.Configuration. How to Use The following example shows how to read and modify the application configuration settings. using System; using System.Configuration; class Program { static void Main() { try { // Open current application configuration Configuration config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None); KeyValueConfigurationCollection section = config.AppSettings.Settings; // Print settings from configuration file foreach (string key in section.AllKeys) { Console.WriteLine($\"{key}: {section[key].Value}\"); } // Add new setting section.Add(\"Database\", \"TestDatabase\"); // Change existing setting section[\"Username\"].Value = \"TestUser\"; // Save changes to file config.Save(ConfigurationSaveMode.Modified); ConfigurationManager.RefreshSection(config.AppSettings.SectionInformation.Name); } catch (ConfigurationErrorsException ex) { Console.WriteLine(\"Error reading configuration: \"); Console.WriteLine(ex.Message); } } } To run this example, include an app.config file with the following content in your project: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <configuration> <appSettings> <add key=\"Server\" value=\"example.com\"/> <add key=\"Username\" value=\"Admin\"/> </appSettings> </configuration> Main Types The main types provided by this library are: System.Configuration.Configuration System.Configuration.ConfigurationManager Additional Documentation Configure apps by using configuration files System.Configuration namespace System.Configuration.Configuration System.Configuration.ConfigurationManager Feedback & Contributing System.Configuration.ConfigurationManager is released as open source under the MIT license. Bug reports and contributions are welcome at the GitHub repository."
  }
}